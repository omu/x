#!/usr/bin/env bash

set -euo pipefail; [[ -z ${TRACE:-} ]] || set -x

declare -A color=(
	[blue]="\\e[38;5;75m"
	[brown]="\\e[38;5;131m"
	[cyan]="\\e[38;5;87m"
	[green]="\\e[38;5;79m"
	[grey]="\\e[38;5;243m"
	[magenta]="\\e[38;5;213m"
	[orange]="\\e[38;5;214m"
	[red]="\\e[38;5;198m"
	[violet]="\\e[38;5;141m"
	[white]="\\e[38;5;255m"
	[yellow]="\\e[38;5;226m"
	[bold]="\\e[1m"
	[dim]="\\e[2m"
	[reverse]="\\e[7m"
	[reset]="\\e[0m"
	[default]="\\e[39m"
)

join_by() {
	local sep=$1
	shift

	if [[ $# -eq 0 ]]; then
		return 0
	fi

	echo -n "$1"
	shift
	printf "%s" "${@/#/$sep}"
}

text() {
	echo -en "${color[dim]}$*${color[reset]}"
}

value() {
	echo -en "${color[bold]}$*${color[reset]}"
}

values() {
	local -a values=()

	local value
	for value; do
		values+=("${color[bold]}$value${color[reset]}")
	done

	join_by '  ' "${values[@]}"
}

field() {
	echo -en "${color[cyan]}$*${color[reset]}"
}

cpu() {
	echo "$(value "$(nproc --all)") $(text "cores")"
}

ram() {
	local free
	local used
	local total

	free=$(awk '/MemFree/ { print $2 }' /proc/meminfo)
	total=$(awk '/MemTotal/ { print $2 }' /proc/meminfo)
	used=$((total - free))

	free=$((free / 1024))
	used=$((used / 1024))
	total=$((total / 1024))

	echo -e "$(text "using") $(value "$used") $(text "MB of") $(value "$total") $(text "MB")"
}

disk() {
	local used
	local total

	total=$(df --output=size / | tail -n 1)
	used=$(df --output=used / | tail -n 1)

	total=$((total / (1024*1024)))
	used=$((used / (1024*1024)))

	echo -e "$(text "using") $(value "$used") $(text "GB of") $(value "$total") $(text "GB")"
}

address() {
	local -a addresses

	mapfile -t addresses < <(
		if systemd-detect-virt -qc; then
			hostname --all-ip-addresses
		else
			LC_ALL=C find /sys/class/net -type l -not -lname '*virtual*' -printf '%f\n' |
			while read -r iface; do
				ip -o -br -f inet addr show "$iface" |
				awk '/ UP / { sub("/.+$", "", $3); print $3 }'
			done |
			tac 2>/dev/null || true
		fi
	)

	if [[ ${#addresses[@]} -eq 0 ]]; then
		return 0
	fi

	values "${addresses[@]}"
}

uptime() {
	local time

	time=$(/usr/bin/cut -d. -f1 /proc/uptime)

	local minutes=$((time / 60 % 60))
	local hours=$((time / 3600 % 24))
	local days=$((time / 86400))

	echo -e "$(value "$days") $(text "days") $(value "$hours") $(text "hours") $(value "$minutes") $(text "minutes")"
}

load() {
	local five

	read -r one five fifteen _ </proc/loadavg

	echo -e "$(value "$one") $(text "in 1 minutes") $(value "$five") $(text "in 5 minutes") $(value "$fifteen") $(text "in 15 minutes")"
}

system() {
	value "$(uname -srmo)"
}

processes() {
	value "$(ps ax | wc -l | tr -d ' ')"
}

declare -Ag site

vendor() {
	[[ -n ${site[vendor]-} ]] || return 1

	local default=${color[${site[color]}]}

	split() {
		local char

		echo "$1" | grep -o . | while read -r char; do
			echo "${color[bold]}${default}${char}${color[reset]}"
		done
	}

	join() {
		join_by "${color[dim]} Â· ${color[reset]}" "$@"
	}

	# shellcheck disable=2046
	echo -en "$(join $(split "${site[vendor]}"))"
}

medley() {
	[[ -n ${site[medley]-} ]] || return 1
	echo -en "${color[bold]}${color[default]}${site[medley]}${color[reset]}"
}

version() {
	[[ -n ${site[version]-} ]] || return 1
	echo -en "${color[bold]}${color[default]}${site[version]}${color[reset]}"
}

build() {
	[[ -n ${site[build]-} ]] || return 1
	echo -en "${color[dim]}${color[default]}${site[build]}${color[reset]}"
}

banner() {
	command -v she &>/dev/null || return 0

	# shellcheck disable=1090
	source <(she)
	etc site

	[[ ${site[*]:+${site[*]}} ]] || return 0

	echo -e "$(vendor)        $(medley)        $(build)"
	echo -e
}

diagnostic() {
	echo -e "$(field "CPU")              $(cpu)"
	echo -e "$(field "RAM")              $(ram)"
	echo -e "$(field "Disk")             $(disk)"
	echo -e "$(field "Address")          $(address)"
	echo -e "$(field "Uptime")           $(uptime)"
	echo -e "$(field "Load")             $(load)"
	echo -e
}

main() {
	banner
	diagnostic
}

main
