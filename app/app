#!/usr/bin/env bash

set -euo pipefail; [[ -z ${TRACE:-} ]] || set -x

service=app
location=/app

cry() {
	echo -e >&2 "\\e[1m$*\\e[0m"
}

die() {
	echo -e >&2 "\\e[38;5;198mE:\\e[0m $*"
	exit 1
}

usage() {
	die "Usage: ${0##*/} [start|stop|restart|status]"
}

sanitize() {
	[[ $EUID -eq 0 ]] || die 'Root privileges required'

	local prog
	for prog in systemd-run systemctl forego; do
		command -v "$prog" &>/dev/null || die "$prog required"
	done

	[[ -d $location ]] || die "Service not found at $location"
	[[ -f $location/Procfile ]] || die "No Procfile found at $location"
}

is_running() {
	systemctl is-active --quiet "$service.service"
}

ensure_running() {
	local pre_wait_timeout=${1:-3} # in seconds
	local has_started

	while (( --pre_wait_timeout >= 0 )); do
		sleep 0.1

		if is_running; then
			has_started=true
			break
		fi
	done

	[[ -n ${has_started:-} ]] || return 1

	local post_wait_timeout=${2:-3} # in seconds
	while (( --post_wait_timeout >= 0 )); do
		sleep 0.1

		is_running || return 1
	done

	return 0
}

run_default() {
	run_restart
}

run_start() {
	if is_running; then
		cry "Already started."
		return 0
	fi

	local port=${PORT:-3000}
	local user=${SUDO_USER:-root}

	local -a args=(
		--unit "$service"
		--uid "$user"
		--gid "$user"
		forego
		start
		-p "$port"
		-f "$location/Procfile"
	)

	local environment
	for environment in /etc/environment "$location"/.env; do
		if [[ -f $environment ]]; then
			args+=(
				-e "$environment"
			)
		fi
	done

	cry "Starting $service."
	systemd-run "${args[@]}"
	ensure_running 3 || die "Cannot start $service.  Invoke 'journalctl' for details."
}

run_stop() {
	if ! is_running; then
		cry "Not started."
		return 0
	fi

	cry "Stopping $service."
	systemctl stop "$service.service"
}

run_restart() {
	if is_running; then
		cry "Restarting $service."
		systemctl restart "$service.service"
	else
		run_start
	fi
}

run_status() {
	if ! is_running; then
		cry "Not started."
		return 0
	fi

	systemctl status "$service.service"
}

main() {
	sanitize

	case ${1:-} in
	start)   run_start ;;
	restart) run_restart ;;
	stop)    run_stop ;;
	status)  run_status ;;
	"")      run_default ;;
	*)       usage ;;
	esac
}

main "$@"
